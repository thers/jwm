#pragma once

#include <stdin.h>
#include <map>

namespace wasm {
    enum opcode : byte_t {
        // Control flow operators
        op_unreachable = 0x00,
        op_nop = 0x01,
        op_block = 0x02,
        op_loop = 0x03,
        op_if = 0x04,
        op_else = 0x05,
        op_end = 0x0b,
        op_br = 0x0c,
        op_br_if = 0x0d,
        op_br_table = 0x0e,
        op_return = 0x0f,

        // Call operators
        op_call = 0x10,
        op_call_indirect = 0x11,

        // Parametric operators
        op_drop = 0x1a,
        op_select = 0x1b,

        // Variable access
        op_get_local = 0x20,
        op_set_local = 0x21,
        op_tee_local = 0x22,
        op_get_global = 0x23,
        op_set_global = 0x24,

        // Memory-related operator
        op_i32_load = 0x28,
        op_i64_load = 0x29,
        op_f32_load = 0x2a,
        op_f64_load = 0x2b,
        op_i32_load_8_s = 0x2c,
        op_i32_load_8_u = 0x2d,
        op_i32_load_16_s = 0x2e,
        op_i32_load_16_u = 0x2f,
        op_i64_load_8_s = 0x30,
        op_i64_load_8_u = 0x31,
        op_i64_load_16_s = 0x32,
        op_i64_load_16_u = 0x33,
        op_i64_load_32_s = 0x34,
        op_i64_load_32_u = 0x35,
        op_i32_store = 0x36,
        op_i64_store = 0x37,
        op_f32_store = 0x38,
        op_f64_store = 0x39,
        op_i32_store_8 = 0x3a,
        op_i32_store_16 = 0x3b,
        op_i64_store_8 = 0x3c,
        op_i64_store_16 = 0x3d,
        op_i64_store_32 = 0x3e,
        op_current_memory = 0x3f,
        op_grow_memory = 0x40,

        // Constants
        op_i32_const = 0x41,
        op_i64_const = 0x42,
        op_f32_const = 0x43,
        op_f64_const = 0x44,

        // Comparison operators
        op_i32_eqz = 0x45,
        op_i32_eq = 0x46,
        op_i32_ne = 0x47,
        op_i32_lt_s = 0x48,
        op_i32_lt_u = 0x49,
        op_i32_gt_s = 0x4a,
        op_i32_gt_u = 0x4b,
        op_i32_le_s = 0x4c,
        op_i32_le_u = 0x4d,
        op_i32_ge_s = 0x4e,
        op_i32_ge_u = 0x4f,
        op_i64_eqz = 0x50,
        op_i64_eq = 0x51,
        op_i64_ne = 0x52,
        op_i64_lt_s = 0x53,
        op_i64_lt_u = 0x54,
        op_i64_gt_s = 0x55,
        op_i64_gt_u = 0x56,
        op_i64_le_s = 0x57,
        op_i64_le_u = 0x58,
        op_i64_ge_s = 0x59,
        op_i64_ge_u = 0x5a,
        op_f32_eq = 0x5b,
        op_f32_ne = 0x5c,
        op_f32_lt = 0x5d,
        op_f32_gt = 0x5e,
        op_f32_le = 0x5f,
        op_f32_ge = 0x60,
        op_f64_eq = 0x61,
        op_f64_ne = 0x62,
        op_f64_lt = 0x63,
        op_f64_gt = 0x64,
        op_f64_le = 0x65,
        op_f64_ge = 0x66,

        // Numeric operators
        op_i32_clz = 0x67,
        op_i32_ctz = 0x68,
        op_i32_popcnt = 0x69,
        op_i32_add = 0x6a,
        op_i32_sub = 0x6b,
        op_i32_mul = 0x6c,
        op_i32_div_s = 0x6d,
        op_i32_div_u = 0x6e,
        op_i32_rem_s = 0x6f,
        op_i32_rem_u = 0x70,
        op_i32_and = 0x71,
        op_i32_or = 0x72,
        op_i32_xor = 0x73,
        op_i32_shl = 0x74,
        op_i32_shr_s = 0x75,
        op_i32_shr_u = 0x76,
        op_i32_rotl = 0x77,
        op_i32_rotr = 0x78,
        op_i64_clz = 0x79,
        op_i64_ctz = 0x7a,
        op_i64_popcnt = 0x7b,
        op_i64_add = 0x7c,
        op_i64_sub = 0x7d,
        op_i64_mul = 0x7e,
        op_i64_div_s = 0x7f,
        op_i64_div_u = 0x80,
        op_i64_rem_s = 0x81,
        op_i64_rem_u = 0x82,
        op_i64_and = 0x83,
        op_i64_or = 0x84,
        op_i64_xor = 0x85,
        op_i64_shl = 0x86,
        op_i64_shr_s = 0x87,
        op_i64_shr_u = 0x88,
        op_i64_rotl = 0x89,
        op_i64_rotr = 0x8a,
        op_f32_abs = 0x8b,
        op_f32_neg = 0x8c,
        op_f32_ceil = 0x8d,
        op_f32_floor = 0x8e,
        op_f32_trunc = 0x8f,
        op_f32_nearest = 0x90,
        op_f32_sqrt = 0x91,
        op_f32_add = 0x92,
        op_f32_sub = 0x93,
        op_f32_mul = 0x94,
        op_f32_div = 0x95,
        op_f32_min = 0x96,
        op_f32_max = 0x97,
        op_f32_copysign = 0x98,
        op_f64_abs = 0x99,
        op_f64_neg = 0x9a,
        op_f64_ceil = 0x9b,
        op_f64_floor = 0x9c,
        op_f64_trunc = 0x9d,
        op_f64_nearest = 0x9e,
        op_f64_sqrt = 0x9f,
        op_f64_add = 0xa0,
        op_f64_sub = 0xa1,
        op_f64_mul = 0xa2,
        op_f64_div = 0xa3,
        op_f64_min = 0xa4,
        op_f64_max = 0xa5,
        op_f64_copysign = 0xa6,

        // Conversions
        op_i32_wrap_i64 = 0xa7,
        op_i32_trunc_s_f32 = 0xa8,
        op_i32_trunc_u_f32 = 0xa9,
        op_i32_trunc_s_f64 = 0xaa,
        op_i32_trunc_u_f64 = 0xab,
        op_i64_extend_s_i32 = 0xac,
        op_i64_extend_u_i32 = 0xad,
        op_i64_trunc_s_f32 = 0xae,
        op_i64_trunc_u_f32 = 0xaf,
        op_i64_trunc_s_f64 = 0xb0,
        op_i64_trunc_u_f64 = 0xb1,
        op_f32_convert_s_i32 = 0xb2,
        op_f32_convert_u_i32 = 0xb3,
        op_f32_convert_s_i64 = 0xb4,
        op_f32_convert_u_i64 = 0xb5,
        op_f32_demote_f64 = 0xb6,
        op_f64_convert_s_i32 = 0xb7,
        op_f64_convert_u_i32 = 0xb8,
        op_f64_convert_s_i64 = 0xb9,
        op_f64_convert_u_i64 = 0xba,
        op_f64_promote_f32 = 0xbb,

        // Reinterpretations
        op_i32_reinterpret_f32 = 0xbc,
        op_i64_reinterpret_f64 = 0xbd,
        op_f32_reinterpret_i32 = 0xbe,
        op_f64_reinterpret_i64 = 0xbf
    };

    static std::map<opcode, const char*> opcode_names = {
            // Control flow operators
            {op_unreachable, "unreachable"},
            {op_nop, "nop"},
            {op_block, "block"},
            {op_loop, "loop"},
            {op_if, "if"},
            {op_else, "else"},
            {op_end, "end"},
            {op_br, "br"},
            {op_br_if, "br_if"},
            {op_br_table, "br_table"},
            {op_return, "return"},

            // Call operators
            {op_call, "call"},
            {op_call_indirect, "call_indirect"},

            // Parametric operators
            {op_drop, "drop"},
            {op_select, "select"},

            // Variable access
            {op_get_local, "get_local"},
            {op_set_local, "set_local"},
            {op_tee_local, "tee_local"},
            {op_get_global, "get_global"},
            {op_set_global, "set_global"},

            // Memory-related operator
            {op_i32_load, "i32_load"},
            {op_i64_load, "i64_load"},
            {op_f32_load, "f32_load"},
            {op_f64_load, "f64_load"},
            {op_i32_load_8_s, "i32_load_8_s"},
            {op_i32_load_8_u, "i32_load_8_u"},
            {op_i32_load_16_s, "i32_load_16_s"},
            {op_i32_load_16_u, "i32_load_16_u"},
            {op_i64_load_8_s, "i64_load_8_s"},
            {op_i64_load_8_u, "i64_load_8_u"},
            {op_i64_load_16_s, "i64_load_16_s"},
            {op_i64_load_16_u, "i64_load_16_u"},
            {op_i64_load_32_s, "i64_load_32_s"},
            {op_i64_load_32_u, "i64_load_32_u"},
            {op_i32_store, "i32_store"},
            {op_i64_store, "i64_store"},
            {op_f32_store, "f32_store"},
            {op_f64_store, "f64_store"},
            {op_i32_store_8, "i32_store_8"},
            {op_i32_store_16, "i32_store_16"},
            {op_i64_store_8, "i64_store_8"},
            {op_i64_store_16, "i64_store_16"},
            {op_i64_store_32, "i64_store_32"},
            {op_current_memory, "current_memory"},
            {op_grow_memory, "grow_memory"},

            // Constants
            {op_i32_const, "i32_const"},
            {op_i64_const, "i64_const"},
            {op_f32_const, "f32_const"},
            {op_f64_const, "f64_const"},

            // Comparison operators
            {op_i32_eqz, "i32_eqz"},
            {op_i32_eq, "i32_eq"},
            {op_i32_ne, "i32_ne"},
            {op_i32_lt_s, "i32_lt_s"},
            {op_i32_lt_u, "i32_lt_u"},
            {op_i32_gt_s, "i32_gt_s"},
            {op_i32_gt_u, "i32_gt_u"},
            {op_i32_le_s, "i32_le_s"},
            {op_i32_le_u, "i32_le_u"},
            {op_i32_ge_s, "i32_ge_s"},
            {op_i32_ge_u, "i32_ge_u"},
            {op_i64_eqz, "i64_eqz"},
            {op_i64_eq, "i64_eq"},
            {op_i64_ne, "i64_ne"},
            {op_i64_lt_s, "i64_lt_s"},
            {op_i64_lt_u, "i64_lt_u"},
            {op_i64_gt_s, "i64_gt_s"},
            {op_i64_gt_u, "i64_gt_u"},
            {op_i64_le_s, "i64_le_s"},
            {op_i64_le_u, "i64_le_u"},
            {op_i64_ge_s, "i64_ge_s"},
            {op_i64_ge_u, "i64_ge_u"},
            {op_f32_eq, "f32_eq"},
            {op_f32_ne, "f32_ne"},
            {op_f32_lt, "f32_lt"},
            {op_f32_gt, "f32_gt"},
            {op_f32_le, "f32_le"},
            {op_f32_ge, "f32_ge"},
            {op_f64_eq, "f64_eq"},
            {op_f64_ne, "f64_ne"},
            {op_f64_lt, "f64_lt"},
            {op_f64_gt, "f64_gt"},
            {op_f64_le, "f64_le"},
            {op_f64_ge, "f64_ge"},

            // Numeric operators
            {op_i32_clz, "i32_clz"},
            {op_i32_ctz, "i32_ctz"},
            {op_i32_popcnt, "i32_popcnt"},
            {op_i32_add, "i32_add"},
            {op_i32_sub, "i32_sub"},
            {op_i32_mul, "i32_mul"},
            {op_i32_div_s, "i32_div_s"},
            {op_i32_div_u, "i32_div_u"},
            {op_i32_rem_s, "i32_rem_s"},
            {op_i32_rem_u, "i32_rem_u"},
            {op_i32_and, "i32_and"},
            {op_i32_or, "i32_or"},
            {op_i32_xor, "i32_xor"},
            {op_i32_shl, "i32_shl"},
            {op_i32_shr_s, "i32_shr_s"},
            {op_i32_shr_u, "i32_shr_u"},
            {op_i32_rotl, "i32_rotl"},
            {op_i32_rotr, "i32_rotr"},
            {op_i64_clz, "i64_clz"},
            {op_i64_ctz, "i64_ctz"},
            {op_i64_popcnt, "i64_popcnt"},
            {op_i64_add, "i64_add"},
            {op_i64_sub, "i64_sub"},
            {op_i64_mul, "i64_mul"},
            {op_i64_div_s, "i64_div_s"},
            {op_i64_div_u, "i64_div_u"},
            {op_i64_rem_s, "i64_rem_s"},
            {op_i64_rem_u, "i64_rem_u"},
            {op_i64_and, "i64_and"},
            {op_i64_or, "i64_or"},
            {op_i64_xor, "i64_xor"},
            {op_i64_shl, "i64_shl"},
            {op_i64_shr_s, "i64_shr_s"},
            {op_i64_shr_u, "i64_shr_u"},
            {op_i64_rotl, "i64_rotl"},
            {op_i64_rotr, "i64_rotr"},
            {op_f32_abs, "f32_abs"},
            {op_f32_neg, "f32_neg"},
            {op_f32_ceil, "f32_ceil"},
            {op_f32_floor, "f32_floor"},
            {op_f32_trunc, "f32_trunc"},
            {op_f32_nearest, "f32_nearest"},
            {op_f32_sqrt, "f32_sqrt"},
            {op_f32_add, "f32_add"},
            {op_f32_sub, "f32_sub"},
            {op_f32_mul, "f32_mul"},
            {op_f32_div, "f32_div"},
            {op_f32_min, "f32_min"},
            {op_f32_max, "f32_max"},
            {op_f32_copysign, "f32_copysign"},
            {op_f64_abs, "f64_abs"},
            {op_f64_neg, "f64_neg"},
            {op_f64_ceil, "f64_ceil"},
            {op_f64_floor, "f64_floor"},
            {op_f64_trunc, "f64_trunc"},
            {op_f64_nearest, "f64_nearest"},
            {op_f64_sqrt, "f64_sqrt"},
            {op_f64_add, "f64_add"},
            {op_f64_sub, "f64_sub"},
            {op_f64_mul, "f64_mul"},
            {op_f64_div, "f64_div"},
            {op_f64_min, "f64_min"},
            {op_f64_max, "f64_max"},
            {op_f64_copysign, "f64_copysign"},

            // Conversions
            {op_i32_wrap_i64, "i32_wrap_i64"},
            {op_i32_trunc_s_f32, "i32_trunc_s_f32"},
            {op_i32_trunc_u_f32, "i32_trunc_u_f32"},
            {op_i32_trunc_s_f64, "i32_trunc_s_f64"},
            {op_i32_trunc_u_f64, "i32_trunc_u_f64"},
            {op_i64_extend_s_i32, "i64_extend_s_i32"},
            {op_i64_extend_u_i32, "i64_extend_u_i32"},
            {op_i64_trunc_s_f32, "i64_trunc_s_f32"},
            {op_i64_trunc_u_f32, "i64_trunc_u_f32"},
            {op_i64_trunc_s_f64, "i64_trunc_s_f64"},
            {op_i64_trunc_u_f64, "i64_trunc_u_f64"},
            {op_f32_convert_s_i32, "f32_convert_s_i32"},
            {op_f32_convert_u_i32, "f32_convert_u_i32"},
            {op_f32_convert_s_i64, "f32_convert_s_i64"},
            {op_f32_convert_u_i64, "f32_convert_u_i64"},
            {op_f32_demote_f64, "f32_demote_f64"},
            {op_f64_convert_s_i32, "f64_convert_s_i32"},
            {op_f64_convert_u_i32, "f64_convert_u_i32"},
            {op_f64_convert_s_i64, "f64_convert_s_i64"},
            {op_f64_convert_u_i64, "f64_convert_u_i64"},
            {op_f64_promote_f32, "f64_promote_f32"},

            // Reinterpretations
            {op_i32_reinterpret_f32, "i32_reinterpret_f32"},
            {op_i64_reinterpret_f64, "i64_reinterpret_f64"},
            {op_f32_reinterpret_i32, "f32_reinterpret_i32"},
            {op_f64_reinterpret_i64, "f64_reinterpret_i64"},
    };
}